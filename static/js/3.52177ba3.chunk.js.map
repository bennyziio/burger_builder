{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","validationError","a","createElement","className","ValidationError","validationText","elementType","Object","assign","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_Users_BenPark_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModelHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.52177ba3.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p className={classes.ValidationError}>{props.shouldValidate.validationText}</p>;\n    }\n    \n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = \n                <select \n                    className={inputClasses.join(' ')} \n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\",\"ValidationError\":\"Input__ValidationError__1ElSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModelHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup };\n        });\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n            \n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n\n        let errorMessage = null;\n\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={this.switchAuthModelHandler} \n                    btnType=\"Danger\">SWITCH TO { this.state.isSignup ? 'SIGNIN' : 'SIGNUP' } </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}