{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","validationError","a","createElement","className","ValidationError","validationText","elementType","Object","assign","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"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","file":"static/js/1.016ad159.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p className={classes.ValidationError}>{props.shouldValidate.validationText}</p>;\n    }\n    \n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = \n                <select \n                    className={inputClasses.join(' ')} \n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\",\"ValidationError\":\"Input__ValidationError__1ElSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button\n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button\n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validationText: 'A Name is required'\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validationText: 'A Street is required'\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP CODE'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true,\n                    validationText: 'A Zipcode is required'\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validationText: 'A Country is required'\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                    validationText: 'A Email is required'\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        \n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n       \n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}/>\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}